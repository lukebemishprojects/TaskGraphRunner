import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.gradleup.shadow'
    id 'dev.lukebemish.managedversioning'
}

group = 'dev.lukebemish'

managedVersioning {
    versionFile.set project.file('version.properties')
    versionPRs()
    versionSnapshots()

    gitHubActions {
        snapshot {
            prettyName.set 'Snapshot'
            workflowDispatch.set(true)
            onBranches.add 'main'
            gradleJob {
                buildCache()
                cacheReadOnly.set false
                javaVersion.set '21'
                name.set 'build'
                gradlew 'Build', 'build'
                gradlew 'Publish', 'publish'
                mavenSnapshot('github')
            }
        }
        release {
            prettyName.set 'Release'
            workflowDispatch.set(true)
            gradleJob {
                buildCache()
                javaVersion.set '21'
                name.set 'build'
                step {
                    setupGitUser()
                }
                readOnly.set false
                gradlew 'Tag Release', 'tagRelease'
                gradlew 'Build', 'build'
                step {
                    run.set 'git push && git push --tags'
                }
                recordVersion 'Record Version', 'version'
                dependencySubmission()
            }
            gradleJob {
                buildCache()
                javaVersion.set '21'
                name.set 'publish'
                needs.add('build')
                tag.set('${{needs.build.outputs.version}}')
                gradlew 'Publish', 'publish', 'closeAndReleaseSonatypeStagingRepository'
                sign()
                mavenCentral()
                mavenStaging('github')
            }
        }
        build_pr {
            prettyName.set 'Build PR'
            pullRequest.set(true)
            gradleJob {
                javaVersion.set '21'
                name.set 'build'
                gradlew 'Build', 'build'
                gradlew 'Publish', 'publish'
                pullRequestArtifact()
            }
        }
        publish_pr {
            prettyName.set 'Publish PR'
            publishPullRequestAction(
                'github',
                "${project.group.replace('.', '/')}/${project.name}",
                'Build PR'
            )
        }
    }

    apply()
}

println "Version: ${project.version}"

sourceSets {
    model {}
    execution {}
    signatures {}
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    registerFeature('model') {
        usingSourceSet(sourceSets.model)
        withSourcesJar()
        withJavadocJar()
    }
    registerFeature('execution') {
        usingSourceSet(sourceSets.execution)
        withSourcesJar()
        withJavadocJar()
    }
    registerFeature('signatures') {
        usingSourceSet(sourceSets.signatures)
        withSourcesJar()
        withJavadocJar()
    }
}

def mainClassName = 'dev.lukebemish.taskgraphrunner.cli.Main'

tasks.register('executionShadowJar', ShadowJar) {
    manifest {
        attributes([
            'Main-Class': 'dev.lukebemish.forkedtaskexecutor.runner.Main',
            'Implementation-Version': project.version as String
        ])
    }
    archiveClassifier = 'execution-all'
    from sourceSets.execution.output
    configurations = [project.configurations.executionRuntimeClasspath]
}

tasks.register('shadowBugWorkaroundNestedJar', Jar) {
    archiveBaseName.set('shadow-bug-workaround-nested')
    dependsOn tasks.executionShadowJar
    from (tasks.executionShadowJar.archiveFile) {
        rename { 'execution-daemon.jar' }
    }
}

jar {
    manifest {
        attributes([
            'Main-Class': mainClassName,
            'Implementation-Version': project.version as String
        ])
    }
    dependsOn tasks.executionShadowJar
    from (tasks.executionShadowJar.archiveFile) {
        rename { 'execution-daemon.jar' }
    }
}

shadowJar {
    manifest {
        attributes([
            'Main-Class': mainClassName,
            'Implementation-Version': project.version as String
        ])
    }
    dependsOn tasks.shadowBugWorkaroundNestedJar
    from (tasks.shadowBugWorkaroundNestedJar.archiveFile)
}

configurations {
    externalTools {
        canBeConsumed = true
        canBeResolved = false
        transitive = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        }
        outgoing {
            capability "dev.lukebemish:taskgraphrunner-external-tools:${project.version}"
        }
        components.java.addVariantsFromConfiguration(it) {}
    }
}

dependencies {
    compileOnlyApi cLibs.jspecify
    compileOnly cLibs.bundles.compileonly
    annotationProcessor cLibs.bundles.annotationprocessor

    implementation 'info.picocli:picocli:4.7.6'
    implementation 'org.slf4j:slf4j-simple:2.0.13'
    implementation 'org.ow2.asm:asm:9.7'
    implementation 'dev.lukebemish.mirror.net.fabricmc:mapping-io:0.6.2'
    // For reading/writing parchment json files
    implementation "org.parchmentmc:feather:1.1.0"
    implementation "org.parchmentmc.feather:io-gson:1.1.0"
    annotationProcessor 'info.picocli:picocli-codegen:4.7.6'
    implementation(project(':')) {
        capabilities {
            requireCapability("dev.lukebemish:taskgraphrunner-model")
        }
    }
    implementation(project(':')) {
        capabilities {
            requireCapability("dev.lukebemish:taskgraphrunner-signatures")
        }
    }
    modelApi 'com.google.code.gson:gson:2.11.0'
    modelCompileOnlyApi cLibs.jspecify
    modelCompileOnly cLibs.bundles.compileonly
    modelAnnotationProcessor cLibs.bundles.annotationprocessor

    signaturesApi 'org.ow2.asm:asm:9.7'
    signaturesCompileOnly cLibs.bundles.compileonly
    signaturesAnnotationProcessor cLibs.bundles.annotationprocessor

    executionCompileOnly cLibs.bundles.compileonly
    executionAnnotationProcessor cLibs.bundles.annotationprocessor
    executionImplementation('dev.lukebemish:forkedtaskexecutor:0.1.1') {
        capabilities {
            requireFeature('runner')
        }
    }

    implementation 'dev.lukebemish:forkedtaskexecutor:0.1.1'
    implementation('dev.lukebemish:forkedtaskexecutor:0.1.1') {
        capabilities {
            requireFeature('runner')
        }
    }
    modelApi 'dev.lukebemish:forkedtaskexecutor:0.1.1'
}

// This keeps the same versions at runtime and compile time
var tools = new Properties()
file("src/main/resources/tools.properties").withInputStream {
    tools.load(it)
}
tools.values().each {
    dependencies.add('externalTools', it)
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            managedVersioning.publishing.sign(signing, it)
            managedVersioning.publishing.pom(it, 'TaskGraphRunner', 'LGPL-3.0-or-later')
            pom {
                name = 'TaskGraphRunner'
                description = 'A tool to create and execute acyclic directed graphs of tasks, with locking and up-to-date checking'
            }

            from components.java
        }
    }
}

managedVersioning.publishing.mavenStaging(publishing)
managedVersioning.publishing.mavenCentral()
managedVersioning.publishing.mavenPullRequest(publishing)
managedVersioning.publishing.mavenSnapshot(publishing)
